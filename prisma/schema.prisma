

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

  model User {
  id           String @id @default(cuid()) @map("_id") @db.String
  email        String
  username     String?
  clients      Client[]
  currentFiles YearFile []
  createdAt    DateTime @default(now())
}

model Client {
  id           String @id @default(cuid()) @map("_id") @db.String
  name         String
  category     ClientCategory 
  status       ClientStatus
  User         User?   @relation(fields: [userId], references: [id])
  userId       String? @db.String
  createdAt    DateTime @default(now())
  yearFiles      YearFile[]

}

model YearFile {
  id                 String @id @default(cuid()) @map("_id") @db.String
  period             String 
  slug               String 
  shortDate          Float  

  periodStart        DateTime
  periodEnd          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  planningFiles      PlanningFile[]
  clientId           String           @db.String
  Client             Client           @relation(fields: [clientId], references: [id])
  User         User?   @relation(fields: [userId], references: [id])
  userId       String? @db.String


}

model PlanningFile {
  id                 String @id @default(cuid()) @map("_id") @db.String
  taxOne            String?
  taxOneCompleted   Boolean       @default(false)
  taxTwo            String?
  taxTwoCompleted   Boolean       @default(false)
  taxThree          String?
  taxThreeCompleted Boolean       @default(false)
  taxFour           String?
  taxFourCompleted  Boolean       @default(false)
  taxFive           String?
  taxFiveCompleted  Boolean       @default(false)
  taxSix            String?
  taxSixCompleted   Boolean       @default(false)
  taxSeven          String?
  taxSevenCompleted Boolean       @default(false)
  yearFileId         String        @db.String
  YearFile           YearFile      @relation(fields: [yearFileId], references: [id])
  
}


enum ClientCategory {
  limited_company
  partnership
  sole_trader
  charity
  other
}

enum ClientStatus {
  awaiting_ml_checks
  active
  archived
  stop_work
}